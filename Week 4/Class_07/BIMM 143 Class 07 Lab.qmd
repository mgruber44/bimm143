---
title: "Class 7: Machine Learning"
name: Max Gruber
PID: A15940632
date: 4/26/2023
format: gfm
---

# Example of K-means clustering

First step is to make some data with a known structure, so we know what the answer should be.

```{r}
tmp <- c(rnorm(30, mean = -3), rnorm(30, mean = 3))
x <- cbind(x = tmp, y = rev(tmp))
plot(x)
```

Now we have some structured data in the variable `x`. Let's see if k-means is able to identify the two groups.

```{r}
k <- kmeans(x,centers=2, nstart = 20)
k
```

Let's explore `k`:

```{r}
k$centers
```

```{r}
plot(x, col = k$cluster)
```

Now we can add the clusters' centers:

```{r}
plot(x, col = k$cluster)
points(k$centers, col = "blue", pch = 15)
```

An example when we select the wrong number of cluster for k-means.

```{r}
k_3 <- kmeans(x, centers = 3, nstart = 20)
plot(x, col = k_3$cluster)
```

# Example of Hierarchical Clustering

Let's use the same data as before, which we stored in `x`. We will use the `hclust()` function.

```{r}
clustering <- hclust(dist(x))
clustering
```

```{r}
plot(clustering)
```

Let's add a horizontal line

```{r}
plot(clustering)
abline(h= 3, col= 'pink')
```

To get our results (i.e., membership vector) we need to "cut" the tree. The function for doing that is `cutree()`.

```{r}
subgroups <- cutree(clustering, h=10)
subgroups
```

Plotting this...

```{r}
plot(x, col = subgroups)
```

You can also "cut" your tree with the number of clusters you want:

```{r}
subgroups <- cutree(clustering, k=2)
```

# Principal Component Analysis (PCA)

## PCA of UK Food Data

First, we read the data:

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names=1)
head(x)
```

### **Q1**. How many rows and columns are in your new data frame named `x`? What R functions could you use to answer this questions?

```{r}
dim(x)
```

There are 17 rows and 4 columns.

### **Q2.** Which approach to solving the 'row-names problem' mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

I prefer using the `row.names` function in the code when using `read.csv`, as it uses less steps and leaves less room for error. The first approach (x \<- x\[,-1\] approach) requires more code and, if ran multiple times, will continue to eliminate columns.

Now we can generate some basic visualizations:

```{r}
barplot(as.matrix(x), col = rainbow( nrow(x) ))
```

Let's redefine our barplot:

```{r}
barplot(as.matrix(x), col = rainbow( nrow(x) ), beside = T)
```

### **Q3**: Changing what optional argument in the above **barplot()** function results in the following plot?

Removing the `beside = T` argument in the barplot() function generates the stacked column chart rather than the individual bar chart.

Other visualizations that can be useful...

### **Q5**: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

The code pairs together each of the countries individually, and plots the data from each country against the other. One country's data is represented on the y-axis, and the other on the x-axis. Each point that lies on the diagonal means there is a 1:1 ratio between that particular data point (food group) between the two countries (the amount of that particular food is consumed at equal amounts between the two countries). If a data point is higher on the y-axis, that means that food group is more represented in the country defined on the y-axis, and if a data point is further to the right on the x-axis, that means that food group is more represented in the country defined on the x-axis.

```{r}
pairs(x, col = rainbow( nrow(x) ), pch = 16)
```

### **Q6**. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

N. Ireland consistently consumes more fresh potatoes than all of the other countries of the UK in terms of this data-set.

Let's apply PCA (principal component analysis). For that, we need to use the command `prcomp()`. This function expects the transpose of our data.

```{r}
#transpose_matrix <- t(x)
#pca <- prcomp( transpose_matrix )

pca <- prcomp(t(x))
summary(pca)
```

Let's plot the PCA results:

```{r}
plot(pca)
```

We need to access the results of the PCA analysis:

```{r}
attributes(pca)
```

We can explore the pca\$x dataframe:

```{r}
pca$x
```

Plotting:

```{r}
plot( x=pca$x[,1], y=pca$x[,2])
```

### **Q7**. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

```{r}
plot( x=pca$x[,1], y=pca$x[,2],xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
```

### **Q8.** Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

```{r}
#colnames(x)
#rownames(pca$x)

plot( x=pca$x[,1], y=pca$x[,2],xlab="PC1", ylab="PC2",)
colors_countries <- c('orange','pink','blue','green')
text( x=pca$x[,1], y=pca$x[,2],colnames(x), col= colors_countries)
```

```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v

z <- summary(pca)
z$importance

barplot(v, xlab="Principal Component", ylab="Percent Variation")

par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )
```

### Q9: Generate a similar 'loadings plot' for PC2. What two food groups feature predominantly and what does PC2 mainly tell us about?

```{r}
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
```

The two food groups that are predominantly featured are fresh potatoes (positive) and soft drinks (negative). PC2 mainly tells us about what groups are similar and what groups are still most variable within the remaining variance not accounted for by PC1. This chart shows that soft drinks are more variable whereas fresh potatoes are more similar in the context of PC2.

# PCA of a RNA-Seq dataset

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> ### **Q10**: How many genes and samples are in this data set?

```{r}
dim( rna.data )
```

I have 100 genes, and 10 samples.

Let's apply PCA:

```{r}
pca_rna = prcomp(t(rna.data))
summary(pca_rna)
```

Let's plot the principal components 1 and 2.

```{r}
plot( pca_rna$x[,1], pca_rna$x[,2],
      xlab = 'PC1', ylab = 'PC2')
```

```{r}
#colnames(rna.data)
cols_samples <- c(rep('blue',5), rep('red',5) )
cols_samples

plot( pca_rna$x[,1], pca_rna$x[,2],
      xlab = 'PC1', ylab = 'PC2',
      col = cols_samples)
```

```{r}
barplot(pca_rna$rotation[,1])
```

```{r}
sort(pca_rna$rotation[,1])
```
