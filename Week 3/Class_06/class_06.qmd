---
title: "Class 6: R functions"
author: "Max Gruber"
date: 2023-04-21
format: gfm
editor_options:
    chunk_output_type: inline
---

In this class, we will develop our own **R functions** to calculate average grades in a fictional class.

We will start with a simplified version of the problem, just calculating the average grade of one student.

# Simplified version

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We are going to start by calculating the average score of the homeworks.

```{r}
mean(student1)
```

To get the minimum score, we can use which.min.

```{r}
student1
which.min(student1)
```

I can do the average of the first 7 homework scores:

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homeworks:

```{r}
student1[1:7]
student1[-8]
```

Another way to drop the lowest score:

```{r}
student1_drop_lowest = student1[-which.min(student1)]
```

I can get the mean of the homework scores after dropping the lowest score by doing:

```{r}
mean(student1_drop_lowest)
```

We have our first working snippet of code!

Student2

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student2
```

Let's try to generalize it to student2:

```{r}
student2_drop_lowest = student2[-which.min(student2)]
student2_drop_lowest
```

There is a way to calculate the mean dropping missing values (or NA).

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm = TRUE)
```

This looks good for student2. However, for student3...

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm = TRUE)
```

We want to know the position of the NAs. So, for student2, we can use the following:

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
which(is.na(student2))
```

For student 3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
which(is.na(student3))
```

For considering missing values, we can mask the NA values with zeroes.

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student2
```

```{r}
which(is.na(student2))
student2[which(is.na(student2))] <- 0
student2
```

If I use the same for student 3

```{r}
student3[which(is.na(student3))] <- 0
student3
mean(student3)
```

This is going to be our final workign snippet of code for all students (with and without NA values)

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
student3[is.na(student3)] <- 0
student3_drop_lowest = student3[-which.min(student3)]
mean(student3_drop_lowest)
```

Let's build a function now:

```{r}
x <- c(100,75,50,NA)

x[is.na(x)] <- 0
x_drop_lowest = x[-which.min(x)]
mean(x_drop_lowest)
```

# Function `grade`

We can write it as a function:

```{r}
#' Calculate the average score for a vector of 
#' homework scores, dropping the lowest score
#' and considering NA values as zeroes
#'
#' @param x A numberic vector of scores
#'
#' @return The average value of homework scores
#' @export
#'
#' @examples
#' 
#' student <- c('100', '50', NA)
#' grade(student)
#' 
grade <- function(x){
  # Masking NA values with 0
  x[is.na(x)] <- 0
  # Dropping the lowest score
  x_drop_lowest = x[-which.min(x)]
  mean(x_drop_lowest)
}
```

Let's apply the function:

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)

grade(student1)
grade(student2)
grade(student3)
```

Let's apply our function to a gradebook from this URL: https://tinyurl.com/gradeinput

```{r}
URL <- 'https://tinyurl.com/gradeinput'
gradebook <- read.csv(URL, row.names = 1)
```

Let's apply my function `grade` to the gradebook using `apply` and running it by **rows** using MARGIN =1.

```{r}
apply(gradebook,1,grade)
```

### 

### **Q2.** Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook?

```{r}
which.max(apply(gradebook,1,grade))
max(apply(gradebook,1,grade))
```

The maximum score is 94.5, which was earned by student 18.

### **Q3.** From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall)?

First, we are going to mask NA values with zeros.

```{r}
gradebook[is.na(gradebook)] <- 0
```

Now, we apply the `mean` function to the gradebook.

```{r}
apply(gradebook,2,mean)
```

```         
```

The toughest homework will be hw2 considering the mean, and considering missing homework as 0.

Maybe having zeroes for missing homework is too struct and is not a good representation of the homework difficultly.

One thing we can do is remove the missing values.

```{r}
gradebook <- read.csv(URL, row.names = 1)
apply(gradebook,2,mean, na.rm = TRUE)
```

Instead of assigning zeros to missing values, if we directly don't consider missing values, the toughest homework will be hw2 (according to the mean).

If we use the median instead of the mean as a measure of overall score...

```{r}
apply(gradebook,2,median,na.rm = TRUE)
boxplot(gradebook)
```

### **Q4.** From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
overall_grades = apply(gradebook,1,grade)
overall_grades
cor(gradebook$hw1, overall_grades)
```

```{r}
gradebook[is.na(gradebook)] <- 0
apply(gradebook,2,cor,y=overall_grades)
```

The maximum value is...

```{r}
which.max(apply(gradebook,2,cor,y=overall_grades))
```

Thus, homework 5 was most predictive of overall score.
